{
  "name": "ng-annotate",
  "version": "0.9.11",
  "description": "add, remove and rebuild angularjs dependency injection annotations",
  "main": "build/es5/ng-annotate-main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/olov/ng-annotate.git"
  },
  "dependencies": {
    "alter": "~0.2.0",
    "convert-source-map": "~0.4.0",
    "esprima": "~1.2.0",
    "optimist": "~0.6.1",
    "ordered-ast-traverse": "~0.1.1",
    "simple-fmt": "~0.1.0",
    "simple-is": "~0.2.0",
    "source-map": "~0.1.37",
    "stable": "~0.1.5",
    "stringmap": "~0.2.2",
    "stringset": "~0.2.1",
    "tryor": "~0.1.2"
  },
  "devDependencies": {
    "defs": "~0.6.2",
    "diff": "~1.0.8",
    "find-line-column": "~0.5.2"
  },
  "keywords": [
    "angular",
    "angularjs",
    "di",
    "dependency",
    "injection",
    "annotate",
    "annotation",
    "annotations",
    "non-intrusive",
    "transformation"
  ],
  "scripts": {
    "test": "node --harmony run-tests"
  },
  "bin": {
    "ng-annotate": "./build/es5/ng-annotate"
  },
  "author": {
    "name": "Olov Lassus",
    "email": "olov.lassus@gmail.com"
  },
  "license": "MIT",
  "readme": "# ng-annotate\nng-annotate adds and removes AngularJS dependency injection annotations.\nIt is non-intrusive so your source code stays exactly the same otherwise.\nNo lost comments or moved lines.\n\nWithout annotations:\n\n    angular.module(\"MyMod\").controller(\"MyCtrl\", function($scope, $timeout) {\n    });\n\nWith annotations:\n\n    angular.module(\"MyMod\").controller(\"MyCtrl\", [\"$scope\", \"$timeout\", function($scope, $timeout) {\n    }]);\n\nAnnotations are useful because with them you're able to minify your source code using your\nfavorite JS minifier.\n\n\n## How does ng-annotate compare to ngmin?\nIf you are currently using ngmin then this is probably your first question. In short:\nng-annotate is much faster, finds more declarations to annotate (including ui-router),\ntreats your source code better, is actively maintained and has a bunch of extra features\non top of that. A much more elaborated answer can be found in\n[\"The future of ngmin and ng-annotate\"](https://github.com/btford/ngmin/issues/93).\n\n*Migrating from ngmin*:\n`ng-annotate -a -` is similar to `ngmin` (use stdin and\nstdout). `ng-annotate -a in.js -o out.js` is similar to `ngmin in.js out.js`. Grunt users\ncan migrate easily by installing\n[grunt-ng-annotate](https://www.npmjs.org/package/grunt-ng-annotate) and replacing `ngmin`\nwith `ngAnnotate` in their Gruntfile. Scroll down for information about other tools.\n\n\n## Installation and usage\n    npm install -g ng-annotate\n\nThen run it as `ng-annotate OPTIONS <file>`. The errors (if any) will go to stderr,\nthe transpiled output to stdout.\n\nUse the `--add` (`-a`) option to add annotations where non-existing,\nuse `--remove` (`-r`) to remove all existing annotations,\nuse `--add --remove` (`-ar`) to rebuild all annotations.\n\nUse the `-o` option to write output to file.\n\nProvide `-` instead of an input `<file>` to read input from stdin.\n\nUse the `--sourcemap` option to generate an inline sourcemap.\n\nUse the `--sourceroot` option to set the sourceRoot property of the generated sourcemap.\n\nUse the `--single_quotes` option to output `'$scope'` instead of `\"$scope\"`.\n\nUse the `--regexp` option to restrict matching further or to expand matching.\nSee description further down.\n\nUse the `--plugin` option to load a user plugin with the provided path (*experimental*, \n0.9.x may change API). See [plugin-example.js](plugin-example.js) for more info.\n\nUse the `--stats` option to print statistics on stderr (*experimental*).\n\n\n## Highly recommended: enable ng-strict-di in your minified builds\n`<div ng-app=\"myApp\" ng-strict-di>`\n\nDo that in your ng-annotate processed builds and AngularJS will let you know if there are\nany missing dependency injection annotations. This is an upcoming feature in AngularJS 1.3\n([docs](https://docs.angularjs.org/api/ng/directive/ngApp)).\n\nA future version of ng-annotate may get support for adding the `ng-strict-di` attribute\nautomatically so you don't have to think about it.\n\n\n## Tools support\n* [Grunt](http://gruntjs.com/): [grunt-ng-annotate](https://www.npmjs.org/package/grunt-ng-annotate) by [Michał Gołębiowski](https://github.com/mzgol)\n* [Browserify](http://browserify.org/): [browserify-ngannotate](https://www.npmjs.org/package/browserify-ngannotate) by [Owen Smith](https://github.com/omsmith)\n* [Brunch](http://brunch.io/): [ng-annotate-uglify-js-brunch](https://www.npmjs.org/package/ng-annotate-uglify-js-brunch) by [Kagami Hiiragi](https://github.com/Kagami)\n* [Gulp](http://gulpjs.com/): [gulp-ng-annotate](https://www.npmjs.org/package/gulp-ng-annotate/) by [Kagami Hiiragi](https://github.com/Kagami)\n* [Broccoli](https://github.com/broccolijs/broccoli): [broccoli-ng-annotate](https://www.npmjs.org/package/broccoli-ng-annotate) by [Gilad Peleg](https://github.com/pgilad)\n* [Rails asset pipeline](http://guides.rubyonrails.org/asset_pipeline.html): [ngannotate-rails](https://rubygems.org/gems/ngannotate-rails) by [Kari Ikonen](https://github.com/kikonen)\n* [Grails asset pipeline](https://github.com/bertramdev/asset-pipeline): [angular-annotate-asset-pipeline](https://github.com/craigburke/angular-annotate-asset-pipeline) by [Craig Burke](https://github.com/craigburke)\n* [Webpack](http://webpack.github.io/): [ng-annotate-webpack-plugin](https://www.npmjs.org/package/ng-annotate-webpack-plugin) by [Chris Liechty](https://github.com/cliechty)\n* Something missing? Contributions welcome - create plugin and submit a README pull request!\n\n\n## Changes\nSee [CHANGES.md](CHANGES.md).\n\n\n## Why?\n * Keep your code base clutter free from annotations but add them in your build step\n prior to minimizing\n * De-clutter an existing code base by removing annotations, non-intrusively\n * If you must store annotations in the repo (for any reason) then checkout,\n remove them, code and refactor without annotations, add them back and commit.\n Alternatively checkout, code and refactor (ignoring annotations), rebuild them and commit.\n\n\n## Declaration forms\nng-annotate understands the two common declaration forms:\n\nLong form:\n\n    angular.module(\"MyMod\").controller(\"MyCtrl\", function($scope, $timeout) {\n    });\n\nShort form:\n\n    myMod.controller(\"MyCtrl\", function($scope, $timeout) {\n    });\n\nIt's not limited to `.controller` of course. It understands `.config`, `.factory`,\n`.directive`, `.filter`, `.run`, `.controller`, `.provider`, `.service`, `.animation` and\n`.invoke`.\n\nFor short forms it does not need to see the declaration of `myMod` so you can run it\non your individual source files without concatenating. If ng-annotate detects a short form\nfalse positive then you can use the `--regexp` option to limit the module identifier.\nExamples: `--regexp \"^myMod$\"` (match only `myMod`) or `--regexp \"^$\"` (ignore short forms).\nYou can also use `--regexp` to opt-in for more advanced method callee matching, for\nexample `--regexp \"^require(.*)$\"` to detect and transform\n`require('app-module').controller(..)`. Not using the option is the same as passing\n`--regexp \"^[a-zA-Z0-9_\\$\\.\\s]+$\"`, which means that the callee can be a (non-unicode)\nidentifier (`foo`), possibly with dot notation (`foo.bar`).\n\nng-annotate understands `angular.module(\"MyMod\", function(dep) ..)` as an alternative to\n`angular.module(\"MyMod\").config(function(dep) ..)`.\n\nng-annotate understands `this.$get = function($scope) ..` and\n`{.., $get: function($scope) ..}` inside a `provider`. `self` and `that` can be used as\naliases for `this`.\n\nng-annotate understands `return {.., controller: function($scope) ..}` inside a\n`directive`.\n\nng-annotate understands `$provide.decorator(\"bar\", function($scope) ..)` and other methods\non `provide` such as `factory`.\n\nng-annotate understands `$routeProvider.when(\"path\", { .. })`.\n\nng-annotate understands `$httpProvider.interceptors.push(function($scope) ..)` and\n`$httpProvider.responseInterceptors.push(function($scope) ..)`.\n\nng-annotate understands [ui-router](https://github.com/angular-ui/ui-router) (`$stateProvider` and\n`$urlRouterProvider`).\n\nng-annotate understands `$modal.open` ([angular-ui/bootstrap](http://angular-ui.github.io/bootstrap/)).\n*experimental*\n\nng-annotate understands chaining.\n\nng-annotate understands IIFE's and attempts to match through them, so\n`(function() { return function($scope) .. })()` works anywhere\n`function($scope) ..` does (for any IIFE args and params).\n\n\n## Reference-following\n*experimental*\n\nng-annotate follows references. This works iff the referenced declaration is\na) a function declaration or\nb) a variable declaration with an initializer.\nModifications to a reference outside of its declaration site are ignored by ng-annotate.\n\nThese examples will get annotated:\n\n    function MyCtrl($scope, $timeout) {\n    }\n    var MyCtrl2 = function($scope) {};\n\n    angular.module(\"MyMod\").controller(\"MyCtrl\", MyCtrl);\n    angular.module(\"MyMod\").controller(\"MyCtrl\", MyCtrl2);\n\n\n## Explicit annotations\nYou can prepend a function expression with `/* @ngInject */` to explicitly state that this\nfunction should get annotated. ng-annotate will leave the comment intact and will thus still\nbe able to also remove or rewrite such annotations. Alternatively, you can wrap an expression\ninside an `ngInject(..)` function call. Use `/* @ngInject */` or `ngInject(..)` as an occasional\nworkaround when ng-annotate doesn't support your code style but feel free to open an issue\nalso.\n\n    x = /* @ngInject */ function($scope) {};\n    obj = {controller: /*@ngInject*/ function($scope) {}};\n    obj.bar = /*@ngInject*/ function($scope) {};\n\n    function ngInject(f) { return f } // define this once in your program\n    x = ngInject(function($scope) {});\n    obj = {controller: ngInject(function($scope) {})};\n    obj.bar = ngInject(function($scope) {});\n\n    =>\n\n    x = /* @ngInject */ [\"$scope\", function($scope) {}];\n    obj = {controller: /*@ngInject*/ [\"$scope\", function($scope) {}]};\n    obj.bar = /*@ngInject*/ [\"$scope\", function($scope) {}];\n\n    function ngInject(f) { return f } // define this once in your program\n    x = ngInject([\"$scope\", function($scope) {}]);\n    obj = {controller: ngInject([\"$scope\", function($scope) {}])};\n    obj.bar = ngInject([\"$scope\", function($scope) {}]);\n\nPrepended to an object literal, `/* @ngInject */` will annotate all of its contained\nfunction expressions, recursively:\n\n\tobj = /*@ngInject*/ {\n\t    controller: function($scope) {},\n\t    resolve: { data: function(Service) {} },\n\t};\n\n\tobj = ngInject({\n\t    controller: function($scope) {},\n\t    resolve: { data: function(Service) {} },\n\t});\n\n\t=>\n\n\tobj = /*@ngInject*/ {\n\t    controller: [\"$scope\", function($scope) {}],\n\t    resolve: { data: [\"Service\", function(Service) {}] },\n\t};\n\n\tobj = ngInject({\n\t    controller: [\"$scope\", function($scope) {}],\n\t    resolve: { data: [\"Service\", function(Service) {}] },\n\t});\n\n\nPrepended to a function statement, to a single variable declaration initialized with a\nfunction expression or to an assignment where the rvalue is a function expression,\n `/* @ngInject */` will attach an `$inject` array to the function:\n\n    // @ngInject\n    function Foo($scope) {}\n\n    // @ngInject\n    var foo = function($scope) {}\n\n    // @ngInject\n    module.exports = function($scope) {}\n\n    =>\n\n    // @ngInject\n    function Foo($scope) {}\n    Foo.$inject = [\"$scope\"];\n\n    // @ngInject\n    var foo = function($scope) {}\n    foo.$inject = [\"$scope\"];\n\n    // @ngInject\n    module.exports = function($scope) {}\n    module.exports.$inject = [\"$scope\"];\n\n\n## Issues and compatibility\nIf ng-annotate does not handle a construct you're using, if there's a bug or if you have a feature\nrequest then please [file an issue](https://github.com/olov/ng-annotate/issues?state=open).\n\n\n## Build and test\nng-annotate is written in ES6 constlet style and uses [defs.js](https://github.com/olov/defs)\nto transpile to ES5. See [BUILD.md](BUILD.md) for build and test instructions.\n\n\n## License\n`MIT`, see [LICENSE](LICENSE) file.\n\nng-annotate is written by [Olov Lassus](https://github.com/olov) with the kind help by\n[contributors](https://github.com/olov/ng-annotate/graphs/contributors).\n[Follow @olov](https://twitter.com/olov) on Twitter for updates about ng-annotate.\n\n\n## Performance\nng-annotate is designed to be very fast (in general limited by parse speed).\nIt traverses the AST exactly once and transforms it without the need for an AST -> source\ndecompilation step.\n\n\n## Library (API)\nng-annotate can be used as a library. See [ng-annotate.js](ng-annotate.js) for further info about\noptions and return value.\n\n    var ngAnnotate = require(\"ng-annotate\");\n    var somePlugin = require(\"./some/path/some-plugin\");\n    var res = ngAnnotate(src, {add: true, plugin: [somePlugin], sourcemap: true, sourceroot: \"/path/to/source/root\"});\n    var errorstringArray = res.errors;\n    var transformedSource = res.src;\n    var transformedSourceMap = res.map;\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/olov/ng-annotate/issues"
  },
  "_id": "ng-annotate@0.9.11",
  "_from": "ng-annotate@~0.9.9"
}
